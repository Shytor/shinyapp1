summary(fitn4)
summary(fitn3)
summary(fitn2)
summary(fitn1)
summary(fit3)$coef[2,4]
summary(lm(mpg~.,mtcars))$coef[,c(1,4)]
summary(lm(mpg~am+wt,mtcars))$coef[2,]
summary(lm(mpg~am+wt,mtcars))$coef[2,]
summary(lm(mpg~am+qsec,mtcars))$coef[2,]
summary(lm(mpg~am+drat,mtcars))$coef[2,]
summary(lm(mpg~am+vs,mtcars))$coef[2,]
summary(lm(mpg~am+disp,mtcars))$coef[2,]
summary(lm(mpg~am+cyl,mtcars))$coef[2,]
summary(lm(mpg~am+hp,mtcars))$coef[2,]
summary(lm(mpg~am+gear,mtcars))$coef[2,]
summary(lm(mpg~am+carb,mtcars))$coef[2,]
summary(lm(mpg~am,mtcars))$coef[2,1]
summary(lm(mpg~.,mtcars))$coef[,1]
summary(lm(mpg~.,mtcars))$coef[2:11,1]
par(mfrow=c(2,2))
plot(fit3,main="Fig 3: Fit3 mpg~am+wt+qsec")
coefs[1] <- summary(lm(mpg~am+wt,mtcars))$coef[2,]
coefs[2] <- summary(lm(mpg~am+qsec,mtcars))$coef[2,]
coefs <- summary(lm(mpg~am+wt,mtcars))$coef[2,]
coefs[2] <- summary(lm(mpg~am+qsec,mtcars))$coef[2,]
coefs <- summary(lm(mpg~am+wt,mtcars))$coef[2,]
coefs[2,] <- summary(lm(mpg~am+qsec,mtcars))$coef[2,]
?rbind
coefs <- summary(lm(mpg~am+wt,mtcars))$coef[2,]
rbind(coefs,summary(lm(mpg~am+qsec,mtcars))$coef[2,])
coefs <- summary(lm(mpg~am+wt,mtcars))$coef[2,]
rbind(coefs,summary(lm(mpg~am+qsec,mtcars))$coef[2,],deparse.level = 1)
coefs <- summary(lm(mpg~am+wt,mtcars))$coef[2,]
coefs
summary(lm(mpg~am+wt,mtcars))$coef[2,]
summary(lm(mpg~am+qsec,mtcars))$coef[2,])
library(MASS)
?shuttle
head(shuttle)
shutdata <- shuttle
typeof(shutdata$use)
typeof(shutdata$wind)
logreg <- glm(use~wind,data = shutdata,family="binomial")
exp(logreg$coeff)
shutdata$wind[1:5]
logreg2 <- glm(use~wind+magn,data = shutdata,family="binomial")
exp(logreg$coeff)
exp(logreg2$coeff)
logreginv <- glm(1-use~wind,data = shutdata,family="binomial")
logreginv <- glm(use~wind-1,data = shutdata,family="binomial")
exp(logreginv$coeff)
logreginv <- glm((1-use)~wind,data = shutdata,family="binomial")
logreginv <- glm((1-as.numeric(use))~wind,data = shutdata,family="binomial")
logreginv <- glm(abs(1-as.numeric(use))~wind,data = shutdata,family="binomial")
exp(logreginv$coeff)
logreginv$coeff
logreg$coeff
INdata <- InsectSprays
head(INdata)
glmIN <- glm(count~spray+1,data=INdata,family="poisson")
glmIN$coeff
exp(glmIN$coeff)
glmIN <- glm(count~spray,data=INdata,family="poisson")
exp(glmIN$coeff)
exp(glmIN$coeff)
glmIN$coeff
glmIN <- glm(count~spray-1,data=INdata,family="poisson")
glmIN$coeff
exp(glmIN$coeff)
texst <- glm(count~spray+offset(1),data=INdata,family="poisson")
?offset
texst <- glm(count~spray+offset(log(10)),data=INdata,family="poisson")
texst <- glm(count~spray+10,data=INdata,family="poisson")
texst <- glm(count~spray,offset=(log(10)),data=INdata,family="poisson")
texst <- glm(count~spray,offset=log(10),data=INdata,family="poisson")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0)
spline <- sapply(knots, function(knot)(x>knot)*(x-knot))
xMat <- cbind(1,x,spline)
yhat <- predict(lm(y~xMat-1))
fit <- lm(y~xMat-1)
fit$coeff
fit
plot(x,y)
lines(x,yhat)
INdata$t <- c(log(1))
texst <- glm(count~spray+offset(t),data=INdata,family="poisson")
texst <- glm(count~spray+offset(log(10)+t),data=INdata,family="poisson")
test <- glm(count~spray+offset(t),data=INdata,family="poisson")
test$coeff
texst$coeff
INdata$t <- c(log(45))
test <- glm(count~spray+offset(t),data=INdata,family="poisson")
texst <- glm(count~spray+offset(log(10)+t),data=INdata,family="poisson")
texst$coeff
test$coeff
log(10)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(caret)
install.packages('caret')
library(caret)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
length(training)
length(adData)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
length(adData)
length(training)
length(testing)
summary(adData)
head(adData)
head(predictors)
head(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
ILonly <- grep("^IL", names(predictors), value=TRUE)
head(ILonly)
ILonly
ILpredictors <- predictors[ILonly,]
head(ILpredictors)
ILpredictors <- predictors[ILonly]
head(ILpredictors)
preProc <- preProcess(ILpredictors,method="pca")
PC <- predict(preProc,ILpredictors)
plot(PC[,1],PC[,2],col=typeColor)
plot(PC[,1],PC[,2])
preProc <- preProcess(ILpredictors,method="pca",pcaComp=8)
MF <- train(diagnosis ~ .,method="glm",preProcess="pca",data=ILpredictors)
MF <- train(ILonly ~ .,method="glm",preProcess="pca",data=training)
MF <- train(ILonly ~ .,method="glm",preProcess="pca",data=training)
install.packages('e1071', dependencies=TRUE)
MF <- train(diagnosis ~ .,method="glm",preProcess="pca",data=ILpredictors)
confusionMatrix(testing,predict(MF,testing))
MF <- train(adData$diagnosis ~ .,method="glm",preProcess="pca",data=ILpredictors)
confusionMatrix(testing$diagnosis,predict(MF,testing))
preProc7 <- preProcess(ILpredictors,method="pca",pcaComp=7)
preProc8 <- preProcess(ILpredictors,method="pca",pcaComp=8)
preProc9 <- preProcess(ILpredictors,method="pca",pcaComp=9)
preProc10 <- preProcess(ILpredictors,method="pca",pcaComp=10)
head(preProc7)
summary(preProc7)
preProcess?
x
?preProcess
preProc10 <- preProcess(ILpredictors,method="pca",thresh=0.8)
preProc10
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILonly
ILset <- training[ILonly,]
preProc10 <- preProcess(ILset,method="pca",thresh=0.8)
head(ILset)
ILset <- training[ILonly]
preProc10 <- preProcess(ILset,method="pca",thresh=0.8)
preProc10
head(ILset)
ILset <- training[ILonly|diagnosis]
training$diagnosis
ILonly + "diagnosis"
append(ILonly,"diagnosis")
ILonly
ILdiag <- append(ILonly,"diagnosis")
subtraining <- training[ILdiag]
heda(subtraining)
head(subtraining)
?train
MF1 <- train(subtraining$diagnosis ~ .,method="glm",data=subtraining)
MFpp <- train(subtraining$diagnosis ~ .,method="glm",preProcess="pca",data=subtraining)
confusionMatrix(testing$diagnosis,preict(MF1,testing))
confusionMatrix(testing$diagnosis,predict(MF1,testing))
confusionMatrix(testing$diagnosis,predict(MFpp,testing))
preProc2 <- preProcess(subtraining,method="pca",thresh=0.8)
preProc2 <- preProcess(subtraining[-diagnosis],method="pca",thresh=0.8)
preProc2 <- preProcess(subtraining[-13],method="pca",thresh=0.8)
testPC <- predict(preProc2,testing)
testPC <- predict(preProc2,testing[ILdiag])
testPC <- predict(preProc2,testing[ILonly])
confusionMatrix(testing$diagnosis,predict)
install.packages('ElemStatLearn')
install.packages('pgmm')
install.packages('rpart')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(data)
head(segmentationOriginal)
sotraining <- subset(segmentationOriginal,Case = "Train")
sotesting <- subset(segmentationOriginal,Case = "Test")
length(segmentationOriginal)
length(sotraining)
nrows(segmentationOriginal)
nrow(segmentationOriginal)
nrow(sotraining)
nrow(sotesting)
head(sotraining)
sotesting <- subset(segmentationOriginal,Case == "Test")
sotraining <- subset(segmentationOriginal,Case == "Train")
nrow(sotesting)
nrow(sotraining)
set.seed(125)
?rpart
library(rpart)
?rpart
modFit <- train(Class ~ .,method="rpart",data=sotraining)
print(modFit$finalModel)
?predict
?data.frame
newdata <- sotesting[which(is.na(your.df$text)),]
newdata <- sotesting[which(is.na(sotesting$text)),]
newdata
newdata[TotalIntench2,1] <- 23000
newdata[TotalIntenCh2,1] <- 23000
newdata["TotalIntenCh2",1] <- 23000
newdata
newdata <- sotesting[which(is.na(sotesting$text)),]
newdata[1,"TotalIntenCh2"] <- 23000
newdata
newdata[2,"TotalIntenCh2"] <- 50000
newdata[3,"TotalIntenCh2"] <- 57000
newdata[1,"FiberWidthCh1"] <- 10
newdata[2,"FiberWidthCh1"] <- 10
newdata[3,"FiberWidthCh1"] <- 8
newdata[4,"FiberWidthCh1"] <- 8
newdata[4,"PerimStatusCh1"] <- 2
newdata[1,"PerimStatusCh1"] <- 2
newdata[2,"VarIntenCh4"] <- 100
newdata[3,"VarIntenCh4"] <- 100
predict(modFit,newdata=newdata)
duh <- predict(modFit,newdata=newdata)
duh
newdata
nd1 <- newdata
duh <- predict(modFit,newdata=nd1)
duh
print(modFit$finalModel)
duh <- predict(modFit,data=nd1)
library(pgmm)
data(olive)
olive = olive[,-1]
nrow(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
duh <- predict(modFit,data=newdata)
?tree
library(tree)
?tree
modFitTree <- tree(Area ~ .,data=olive)
install.package("tree")
install.packages("tree")
library(tree)
modFitTree <- tree(Area ~ .,data=olive)
duh <- predict(modFit,data=newdata)
mean(olive$Area)
newdata$Area
?tree
duh <- predict(modFitTree,data=newdata)
duh
duh <- predict(modFitTree,data=newdata$Area)
duh
newdata
?predict
predict(modFitTree,data=newdata)
newdata
head(olive)
modFitTrain <- train(Area ~ .,data=olive,method="rpart2")
predict(modFitTrai,data=newdata)
predict(modFitTrain,data=newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
modFitTrain <- train(Area ~ .,data=olive,method="rpart2")
predict(modFitTrain,data=newdata)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFitTrain,data=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
MFs <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,method="glm",family="binomial")
MFs <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(MFs)
missClass(MFs,predict(MFs,newdata=testSA))
MFp <- predict(MFs,testSA)
head(MFs)
head(MFp)
head(testSA)
head(trainSA)
missClass(testSA$chd,MFp)
MFpt <- predict(MFs,data=trainSA)
MFpt <- predict(MFs,trainSA)
missClass(testSA$chd,MFpt)
missClass(trainSA$chd,MFpt)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
MFrf <- train(y ~ .,data=vowel.train,method="rf",prox=TRUE)
?varImp
varImp(MFrf)
library(caret)
library(ElemStatLearn)
libary(pgmm)
library(pgmm)
library(rpart)
library(gbm)
install.packages("gbm")
library(gbm)
library(lubridate)
library(forecast)
install.packages("forecast")
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
typeof(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
typeof(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
head(vowel.train)
set.seed(33833)
modFit <- train(y~.,method="rf",data=vowel.train,prox=TRUE)
modFit
str(vowel.train)
modFit2 <- train(y~.,method="gbm",data=vowel.train)
modFit2
confusionMatrix(modFit)
confusionMatrix(modFit2)
?confusionMatrix
confusionMatrix(modFit2)$overall
pred1 <- predict(modFit,vowel.test)
pred2 <- predict(modFit2,vowel.test)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred2,vowel.test$y)
table(pred1,pred2)
confusionMatrix(pred1 %in% pred2, vowel.test$y)
confusionMatrix(pred1, pred2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitRF <- train(y~.,method="rf",data=vowel.train, prox=TRUE)
modFitRF <- train(diagnosis~.,method="rf",data=training, prox=TRUE)
modFitGBM <- train(diagnosis~.,method="gbm",data=training, prox=TRUE)
modFitGBM <- train(diagnosis~.,method="gbm",data=training)
modFitLDA <- train(diagnosis~.,method="lda",data=training)
predRF <- predict(modFitRF,testing$diagnosis)
predGBM <- predict(modFitGBM,testing$diagnosis)
predRF <- predict(modFitRF,testing)
predGBM <- predict(modFitGBM,testing)
predLDA <- predict(modFitLDA,testing)
predStack <- data.frame(predRF,predGBM,predLDA,diagnosis=testing$diagnosis)
combModel <- train(diagnosis~.,method="rf",data=predStack)
confusionMatrix(predRF,testing$diagnosis)
confusionMatrix(predGBM,testing$diagnosis)
confusionMatrix(predLDA,testing$diagnosis)
combPred <- predict(combModel,predStack)
confusionMatrix(combPred,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(training)
mFit3 <- train(CompressiveStrength~.,method="lasso",data=training)
mFit3 <- train(CompressiveStrength~.,method="lasso",data=training)
?plot.enet
plot.enet(mFit3)
plot.enet(mFit3$finalModel)
plot.enet(mFit3$finalModel, "penalty")
library(lubridate)  # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
x <-  getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
library(RCurl)
x <-  getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
library(lubridate)  # For year() function below
dat = read.csv(text = x)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
batFit <- bats(training$date)
prbat <- predict(batFit,testing)
accuracy(batFit,testing)
?forecast.bats
forecast.bats(batFit,tstrain,level=0.95)
forecast.bats(batFit,testing,level=0.95)
batFit <- bats(tstrain)
forecast(batFit, level=95, h=nrows(testing))
forecast(batFit, level=95, h=nrow(testing))
nrow(testing)
testing
fcast <- forecast(batFit, level=95, h=nrow(testing))
accuracy(fcast, testing)
accuracy(fcast, testing$visitsTumblr)
plot(fcast); lines(testing,col="red")
points(testing$visitsTumblr)
fcast$test <- testing$visitsTumblr
fcast
testing$Lo <- fcast$Lo 95
testing$Lo <- fcast['Lo 95',]
testing$Lo <- fcast[,'Lo 95']
fcast[,'Lo 95']
fcast['Lo 95',]
fcast
names(fcast)
fcast$lower
testing$Lo <- fcast$lower
testing$Hi <- fcast$upper
testing
ifelse(testing$visitTumblr > testing$Lo & testing$visitsTumblr < testing$Hi,1,0)
ifelse(testing$visitTumblr > testing$Lo,1,0)
if(testing$visitTumblr > testing$Lo & testing$visitsTumblr < testing$Hi)
ifelse((testing$visitTumblr > testing$Lo) & (testing$visitsTumblr < testing$Hi),1,0)
ifelse((testing$visitTumblr > testing$Lo) & (testing$visitsTumblr < testing$Hi),testing$in <- 1,testing$in <- 0)
ifelse((testing$visitTumblr > testing$Lo) & (testing$visitsTumblr < testing$Hi),testing$ans <- 1,testing$ans <- 0)
ifelse((testing$visitTumblr > testing$Lo) & (testing$visitsTumblr < testing$Hi))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?e1071
svmFit <- svm(CompressiveStrength~.,data=training)
pred <- predict(svmFit,testing)
pred
confusionMatrix(pred,testing)
confusionMatrix(pred,testing$CompressiveStrength)
pred
testing
plot(testing$CompressiveStrength)
?points
points(svmFit)
rmse(pred,testing$CompressiveStrength)
library(hdroGOF)
library(hydroGOF)
install.packages("hydroGOF")
library(hydroGOF)
rmse(pred,testing$CompressiveStrength)
setwd(R/shinyapp/shinyapp1)
setwd("R/shinyapp/shinyapp1")
library(shinyapps)
shinyapps::deployApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
shinyapps::deployApp()
runApp()
runApp()
runApp()
runApp()
shinyapps::deployApp()
